import numpy as np
import sympy as sp

from geo_adjust.gh import GHAdjust


def simulate_data(m, c, var):
    x = np.arange(0, 5., .075)
    y = np.exp(m * x + c)
    x += np.random.randn(x.shape[0]) * var
    y += np.random.randn(y.shape[0]) * var
    return np.vstack((x, y)).T


# dataset
data = np.array([
    [-1.154895e-01, 1.260049e+00],
    [1.498051e-01, 1.102830e+00],
    [1.936062e-01, 1.082065e+00],
    [-5.905462e-03, 1.295948e+00],
    [5.178682e-02, 1.100053e+00],
    [4.449949e-01, 1.598652e+00],
    [6.913994e-01, 1.462532e+00],
    [9.221202e-01, 1.294855e+00],
    [7.382773e-01, 1.499086e+00],
    [5.608017e-01, 1.413884e+00],
    [7.775082e-01, 1.394964e+00],
    [7.209521e-01, 1.135378e+00],
    [1.131159e+00, 1.214519e+00],
    [1.106306e+00, 1.566797e+00],
    [1.422500e+00, 1.565527e+00],
    [8.923463e-01, 1.667113e+00],
    [1.198885e+00, 1.368515e+00],
    [1.331130e+00, 1.673343e+00],
    [1.166133e+00, 1.323343e+00],
    [1.352258e+00, 1.436326e+00],
    [1.905128e+00, 1.584186e+00],
    [1.718818e+00, 2.157615e+00],
    [1.737902e+00, 2.058175e+00],
    [1.404082e+00, 1.874441e+00],
    [1.826372e+00, 2.282621e+00],
    [2.445514e+00, 1.887528e+00],
    [1.964808e+00, 2.012621e+00],
    [2.044765e+00, 1.828773e+00],
    [2.206959e+00, 1.851108e+00],
    [2.101521e+00, 2.200603e+00],
    [1.882025e+00, 2.433840e+00],
    [2.244162e+00, 2.225988e+00],
    [2.254576e+00, 2.054698e+00],
    [2.325561e+00, 2.343498e+00],
    [2.391952e+00, 1.896699e+00],
    [2.992211e+00, 2.272956e+00],
    [2.592233e+00, 2.553052e+00],
    [2.739505e+00, 2.552225e+00],
    [2.723564e+00, 2.985652e+00],
    [2.750943e+00, 2.563717e+00],
    [2.934715e+00, 2.836231e+00],
    [3.200131e+00, 2.776463e+00],
    [2.949968e+00, 2.893159e+00],
    [3.342994e+00, 2.770194e+00],
    [3.302890e+00, 3.376581e+00],
    [3.491607e+00, 3.122911e+00],
    [3.396308e+00, 3.286657e+00],
    [3.381391e+00, 3.081790e+00],
    [3.409625e+00, 3.303839e+00],
    [3.240078e+00, 3.063812e+00],
    [3.666196e+00, 3.608685e+00],
    [3.348523e+00, 3.157044e+00],
    [3.947099e+00, 3.558951e+00],
    [3.947633e+00, 4.054458e+00],
    [3.662718e+00, 3.545496e+00],
    [4.221214e+00, 3.767311e+00],
    [4.479405e+00, 3.811645e+00],
    [4.366616e+00, 3.985818e+00],
    [4.405679e+00, 4.102971e+00],
    [4.526651e+00, 3.946765e+00],
    [4.591284e+00, 4.516020e+00],
    [4.770587e+00, 4.429461e+00],
    [4.814151e+00, 4.469768e+00],
    [4.802811e+00, 4.419313e+00],
    [4.687635e+00, 4.731043e+00],
    [4.541102e+00, 4.669141e+00],
    [4.853086e+00, 5.086856e+00],
])

# data = simulate_data(.3, .1, 0.2**2)

if __name__ == '__main__':

    # create a solver object
    solver = GHAdjust()

    # the model
    phi = sp.symbols('phi')

    # observations (l)
    y, x = sp.symbols('y x')
    # parameters (x)
    m, c = sp.symbols('m c')

    # fit the following exponential model (y = e^(mx+c))
    phi = sp.Matrix([y - sp.exp(m * x + c)])
    solver.add_model_autodiff(phi, (m, c), (x, y))

    solver.set_initial_params([0., 0.])
    solver.add_data(data)

    result = solver.solve()

    result.parameters.print()
    result.model.print_timing()
