import networkx as nx
import pygraphviz as pg
import matplotlib.pyplot as plt
import numpy as np


plt.style.use('tth')


def get_imu_calib_data():
    result = {}
    result2 = {}

    result['corr'] = np.array([[1.00000000e+00, -2.76516602e-05, 6.79178339e-06,
                                -3.97516543e-06, -1.26502319e-07, -4.82943926e-08,
                                -6.83819520e-08, -8.93148689e-06, 1.53996542e-06],
                               [-2.76516602e-05, 1.00000000e+00, 3.62249025e-03,
                                -1.82185214e-06, -8.08135531e-07, 3.94875727e-07,
                                8.96576204e-06, 6.77404875e-08, 1.78297440e-07],
                               [6.79178339e-06, 3.62249025e-03, 1.00000000e+00,
                                -8.93447004e-07, -7.44135688e-08, -7.48835987e-06,
                                -3.68399836e-07, -9.75410202e-08, -6.65706729e-08],
                               [-3.97516543e-06, -1.82185214e-06, -8.93447004e-07,
                                1.00000000e+00, -1.17353347e-02, -1.16945888e-02,
                                -6.98483212e-08, -1.80234411e-06, -4.06271262e-06],
                               [-1.26502319e-07, -8.08135531e-07, -7.44135688e-08,
                                -1.17353347e-02, 1.00000000e+00, -1.16289369e-02,
                                -5.66228710e-06, 7.28035468e-08, -6.27513697e-04],
                               [-4.82943926e-08, 3.94875727e-07, -7.48835987e-06,
                                -1.16945888e-02, -1.16289369e-02, 1.00000000e+00,
                                -1.31062531e-04, -1.82111655e-04, 2.87255929e-07],
                               [-6.83819520e-08, 8.96576204e-06, -3.68399836e-07,
                                -6.98483212e-08, -5.66228710e-06, -1.31062531e-04,
                                1.00000000e+00, 4.58880245e-05, -2.13911063e-06],
                               [-8.93148689e-06, 6.77404875e-08, -9.75410202e-08,
                                -1.80234411e-06, 7.28035468e-08, -1.82111655e-04,
                                4.58880245e-05, 1.00000000e+00, -4.36378199e-06],
                               [1.53996542e-06, 1.78297440e-07, -6.65706729e-08,
                                -4.06271262e-06, -6.27513697e-04, 2.87255929e-07,
                                -2.13911063e-06, -4.36378199e-06, 1.00000000e+00]])

    result['vcm'] = np.array([[9.92860329e-08, -2.71872120e-12, 6.69643746e-13,
                               -6.82237626e-14, -2.17079909e-15, -8.28669752e-16,
                               -1.20200118e-15, -1.58005515e-13, 2.71439593e-14],
                              [-2.71872120e-12, 9.73640808e-08, 3.53689788e-10,
                               -3.09634178e-14, -1.37328491e-14, 6.70966012e-15,
                               1.56065142e-13, 1.18673050e-15, 3.11216518e-15],
                              [6.69643746e-13, 3.53689788e-10, 9.79110759e-08,
                               -1.52272364e-14, -1.26807549e-15, -1.27597839e-13,
                               -6.43064684e-15, -1.71359271e-15, -1.16524435e-15],
                              [-6.82237626e-14, -3.09634178e-14, -1.52272364e-14,
                               2.96669407e-09, -3.48103930e-11, -3.46866243e-11,
                               -2.12232395e-16, -5.51161021e-15, -1.23785745e-14],
                              [-2.17079909e-15, -1.37328491e-14, -1.26807549e-15,
                               -3.48103930e-11, 2.96588377e-09, -3.44871874e-11,
                               -1.72023694e-14, 2.22604532e-16, -1.91169420e-12],
                              [-8.28669752e-16, 6.70966012e-15, -1.27597839e-13,
                               -3.46866243e-11, -3.44871874e-11, 2.96538713e-09,
                               -3.98142528e-13, -5.56778994e-13, 8.75039886e-16],
                              [-1.20200118e-15, 1.56065142e-13, -6.43064684e-15,
                               -2.12232395e-16, -1.72023694e-14, -3.98142528e-13,
                               3.11199321e-09, 1.43721944e-13, -6.67529887e-15],
                              [-1.58005515e-13, 1.18673050e-15, -1.71359271e-15,
                               -5.51161021e-15, 2.22604532e-16, -5.56778994e-13,
                               1.43721944e-13, 3.15216399e-09, -1.37052069e-14],
                              [2.71439593e-14, 3.11216518e-15, -1.16524435e-15,
                               -1.23785745e-14, -1.91169420e-12, 8.75039886e-16,
                               -6.67529887e-15, -1.37052069e-14, 3.12922144e-09]])

    result2['vcm'] = np.array([[2.61737219e-07, -3.40169981e-11, 5.40308630e-11,
                                -1.67356618e-12, -1.64196057e-12, -9.73776441e-13,
                                -3.04430839e-12, 1.00873292e-11, 2.04387514e-11],
                               [-3.40169981e-11, 2.60597546e-07, 2.36822222e-11,
                                -3.90110834e-12, 1.81201723e-12, 1.08511844e-12,
                                1.11819304e-12, 3.05186024e-12, 1.24498826e-11],
                               [5.40308630e-11, 2.36822222e-11, 2.59895909e-07,
                                1.23346866e-12, -9.98462121e-13, 3.65019867e-12,
                                -4.44289881e-12, -9.19596039e-12, -3.02884065e-12],
                               [-1.67356618e-12, -3.90110834e-12, 1.23346866e-12,
                                3.79519945e-09, -5.42162061e-10, -5.40986023e-10,
                                -5.52814092e-13, -1.42409132e-12, -3.74731861e-12],
                               [-1.64196057e-12, 1.81201723e-12, -9.98462121e-13,
                                -5.42162061e-10, 3.78402056e-09, -5.39153673e-10,
                                -6.25072924e-13, 6.09422409e-13, -5.02109452e-12],
                               [-9.73776441e-13, 1.08511844e-12, 3.65019867e-12,
                                -5.40986023e-10, -5.39153673e-10, 3.77709040e-09,
                                -1.78556728e-12, -4.63872550e-13, 1.26431935e-12],
                               [-3.04430839e-12, 1.11819304e-12, -4.44289881e-12,
                                -5.52814092e-13, -6.25072924e-13, -1.78556728e-12,
                                2.16956232e-08, 9.21163754e-12, 1.75905928e-12],
                               [1.00873292e-11, 3.05186024e-12, -9.19596039e-12,
                                -1.42409132e-12, 6.09422409e-13, -4.63872550e-13,
                                9.21163754e-12, 2.18244767e-08, -5.72598870e-12],
                               [2.04387514e-11, 1.24498826e-11, -3.02884065e-12,
                                -3.74731861e-12, -5.02109452e-12, 1.26431935e-12,
                                1.75905928e-12, -5.72598870e-12, 2.15870641e-08]])

    result2['corr'] = np.array([[1.00000000e+00, -1.30250105e-04, 2.07161688e-04,
                                 -5.30997952e-05, -5.21738924e-05, -3.09704726e-05,
                                 -4.03989277e-05, 1.33466274e-04, 2.71909781e-04],
                                [-1.30250105e-04, 1.00000000e+00, 9.09991990e-05,
                                 -1.24046795e-04, 5.77032690e-05, 3.45870319e-05,
                                 1.48711843e-05, 4.04676104e-05, 1.65990527e-04],
                                [2.07161688e-04, 9.09991990e-05, 1.00000000e+00,
                                 3.92745390e-05, -3.18386854e-05, 1.16503264e-04,
                                 -5.91671479e-05, -1.22102752e-04, -4.04370917e-05],
                                [-5.30997952e-05, -1.24046795e-04, 3.92745390e-05,
                                 1.00000000e+00, -1.43065553e-01, -1.42886123e-01,
                                 -6.09222224e-05, -1.56476318e-04, -4.14005897e-04],
                                [-5.21738924e-05, 5.77032690e-05, -3.18386854e-05,
                                 -1.43065553e-01, 1.00000000e+00, -1.42612350e-01,
                                 -6.89870983e-05, 6.70609585e-05, -5.55552189e-04],
                                [-3.09704726e-05, 3.45870319e-05, 1.16503264e-04,
                                 -1.42886123e-01, -1.42612350e-01, 1.00000000e+00,
                                 -1.97247481e-04, -5.10914308e-05, 1.40017174e-04],
                                [-4.03989277e-05, 1.48711843e-05, -5.91671479e-05,
                                 -6.09222224e-05, -6.89870983e-05, -1.97247481e-04,
                                 1.00000000e+00, 4.23329815e-04, 8.12826061e-05],
                                [1.33466274e-04, 4.04676104e-05, -1.22102752e-04,
                                 -1.56476318e-04, 6.70609585e-05, -5.10914308e-05,
                                 4.23329815e-04, 1.00000000e+00, -2.63804244e-04],
                                [2.71909781e-04, 1.65990527e-04, -4.04370917e-05,
                                 -4.14005897e-04, -5.55552189e-04, 1.40017174e-04,
                                 8.12826061e-05, -2.63804244e-04, 1.00000000e+00]])

    # result with robot, result without robot
    return result, result2


def dev_viz():
    G = pg.AGraph()
    nlist = "A B C D E".split()
    a, b = "A A B", "B C D"
    elist = zip(a.split(), b.split())

    G.add_nodes_from(nlist)
    G.add_edges_from(elist)
    # G.node_attr.update(color="red", style="filled")
    # G.edge_attr.update(color="blue", len="2.0", width="2.0")

    print(G.edge_attr)
    # returns {'color': 'red', 'width': '', 'len': '2.0'}

    # add new edge with custom length (all others have length=2.0):
    G.add_edge("C", "E", len="6.0", color="blue", width="2.0")

    edge = G.get_edge("C", "E")
    print(edge.attr)
    # returns {'color': 'blue', 'width': '2.0', 'len': '3.0'}

    node = G.get_node("E")
    node.attr.update(width=2, height=2)

    # and you can confirm that introspection by drawing & printing this graph:
    # nx.draw_networkx(G)
    # plt.show()
    G.layout()
    G.draw('graph.png', format='png', prog='neato')


def dev_viz_2(data):
    G = nx.Graph()

    var = np.diag(data['vcm']).squeeze()
    corr = data['corr']
    corr[np.abs(corr) < 1e-5] = 0.
    weights = np.abs(corr.copy())
    weights[weights == 0.] = np.nan
    # print(corr)
    names = ['$b_x$', '$b_y$', '$b_z$', '$s_x$', '$s_y$', '$s_z$', '$a_x$', '$a_y$', '$a_z$']
    scale_nodes = 150./np.min(var)
    weights = weights / np.nanmin(weights)
    # scale_edges = 1/np.nanmin(weights)

    # add parameter as nodes
    for i, a in enumerate(var):
        # G.add_node(names[i], size=var[i]*scale_nodes)
        G.add_node(names[i], size=300)

    # add correlation as edges
    for i in range(corr.shape[0]):
        for j in range(corr.shape[1]):
            if i != j:
                if not G.has_edge(names[i], names[j]):
                    if corr[i,j] != 0.:
                        G.add_edge(names[i], names[j], weight=weights[i, j], corr=corr[i, j])

    # pos = nx.shell_layout(G, nlist=[['bx', 'by', 'bz'], ['sx', 'sy', 'sz'], ['ax', 'ay', 'az']])
    pos = nx.circular_layout(G)
    pos = nx.spring_layout(G, pos=pos, weight='weight', iterations=50)

    # pos = nx.spectral_layout(G, weight='length')
    edge_values = nx.get_edge_attributes(G, 'weight')
    edge_labels = {}
    for k, v in edge_values.items():
        edge_labels[k] = '{:9.2e}'.format(v)
    node_sizes = list(nx.get_node_attributes(G, 'size').values())

    nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color='white', edgecolors='k')
    nx.draw_networkx_labels(G, pos)
    nx.draw_networkx_edges(G, pos, edge_color=list(edge_values.values()), edge_cmap=plt.get_cmap('bone_r'),
                           edge_vmin=-max(list(edge_values.values()))/2, edge_vmax=max(list(edge_values.values())))
    # nx.draw_networkx_edges(G, pos, edge_color=list(edge_values.values()), edge_cmap=plt.get_cmap('bone_r'))
    # nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels)
    plt.axis('equal')



if __name__ == '__main__':
    # dev_viz_3()

    result_rob, result_g = get_imu_calib_data()
    dev_viz_2(result_rob)
    plt.figure()
    dev_viz_2(result_g)

    plt.show()
    print('Finish')
